@using Syncfusion.Blazor.DropDowns
@inject IJSRuntime JsRuntime
<div class="game-drop-down-wrapper">
    <SfDropDownList TValue="string"
                    TItem="GameField"
                    ID="dropdown"
                    PopupHeight="400px"
                    Width="300px"
                    Placeholder="Supervisor"
                    @bind-Value="@DropVal"
                    DataSource="@Games"
                    CssClass="game-drop-down">
        <DropDownListEvents TItem="GameField"
                            TValue="string"
                            ValueChange="OnGameChange"
                            Opened="AddAttribute" />
        <DropDownListFieldSettings Value="id" Text="text"></DropDownListFieldSettings>
    </SfDropDownList>
    <div class="game-selection-label">
        <span>@CurrentSelection.id : </span><span>@CurrentSelection.text</span>
    </div>
</div>

<style>
    .game-drop-down-wrapper {
        margin: 40px;
        display: flex;
    }

    .game-drop-down li.e-list-item[isavailable="false"] {
        color: #f00;
    }

    .game-drop-down li.e-list-item {
        color: #00f;
    }

    .game-selection-label {
        margin-left: 20px;
    }
</style>

@code{

    public string DropVal { get; set; }
    public GameField CurrentSelection { get; set; }

    public class GameField
    {
        public string id { get; set; }
        public string text { get; set; }
        public bool isAvailable { get; set; }
    }

    List<GameField> Games = new List<GameField>() {
        new GameField(){ id= "Game1", text= "American Football", isAvailable = true },
        new GameField(){ id= "Game2", text= "Badminton", isAvailable = false },
        new GameField(){ id= "Game3", text= "Basketball", isAvailable = false  },
        new GameField(){ id= "Game4", text= "Cricket", isAvailable = true  },
        new GameField(){ id= "Game5", text= "Football", isAvailable = true  },
        new GameField(){ id= "Game6", text= "Golf", isAvailable = false  },
        new GameField(){ id= "Game7", text= "Hockey", isAvailable = true  },
        new GameField(){ id= "Game8", text= "Rugby", isAvailable = true },
        new GameField(){ id= "Game9", text= "Snooker", isAvailable = false },
        new GameField(){ id= "Game10", text= "Tennis", isAvailable = false }
        };

    protected override void OnInitialized()
    {
        CurrentSelection = Games.Find(x => x.id == "Game4");
    }

    private void OnGameChange(ChangeEventArgs<string, GameField> args)
    {
        CurrentSelection = args.ItemData;
        StateHasChanged();
    }
    private void AddAttribute(PopupEventArgs args)
    {

        this.JsRuntime.InvokeVoidAsync("AddAttribute", Games, "dropdown");
    }
}